def de_bruijn_graph(k, text):
    graph = {}

    for i in range(len(text) - k + 1):
        kmer = text[i:i + k - 1]
        next_kmer = text[i + 1:i + k]

        if kmer in graph:
            graph[kmer].append(next_kmer)
        else:
            graph[kmer] = [next_kmer]

    return graph

# Sample Input
k_value = 12
input_text = "TCCCGGTGAACAAGTTTACTGGCCAACCCACGCGCATACGCAGTGCCTTTCATCAAGCTTAGTATAGTCTTTTCCCCTTGACGACGATCAAATCTTCTCCTCCTAATCTTCGAAGGCCCAGGATTCCTATCTCTATCTCATATTTTACCTTCCCCCGCCATACGGACGGAGGTTACTTAGGGTTCACGATAATGTCAACTAGATAACTCGTGGCATCGGTCAGATGGAGGAGTTTCGTTAACCGGGCTGGGGAGGTTAACGTCATGACAAGAGTTCTTTCTTGGATTCTAAAAGAATTCATACCATCTTATTTTACCTCCTGCACGCTTACGGGAACGCGGATAGCCATCATTGTGCAGTAACATATCCATTAATTGTGCCTAGACGTCGAGGGGATGACCTACCGGACTGGCCTGGGGGAACTATTGGAGGGTAGCCCCTGTGAACTGGCGAGACGCTCAGGTTGGCATTTTATTGCTATTATGGTCTCATCTTGTCGGTCTGGTTACATCGCTGATGTGGCTATCGGTCTCCTCCTAATGACCCTGATAATCGAGATGCAAGTGTGACGACACTGAGCGACCTAAGATACTGAAAATAGGGTCGAGAAGTTAAACTGTTTTAGGATGCGAAATTTACGGCTGCATAACATAGATTGCGTAGCACCTATGTCTGACCTCTATAGAATAGGTACCTGATTCAAGCAGTTGCACCAGAGCTCTCTCAAGCTGTGACAGTGTGCTAGTTGCGTCCTAATGTGCAGTCGCGTGCTTCTAAGCGTTGTTGGAAGTACTTATTAGTTGCGGAGTCATAGTTCTTTCGAAGGTGGCGCCCCTCTTGGCAGCAGCTGACGTCGCTACCACCGAGTCTGCGGCCGACCTTGCCCTCGTCCGATCTGTCGCCGCGCGTAACTCTGTTCCGTTACCCGAAGATCCGCTCCAAAAAGTACTCTGACCTCGTGCTGTTTGAGGAAGGGTGCGAAAAAGACTTACAGACCTCACCGTAACATTCGCGAAGTACAGAGTACGAACCTGCGAAATCTCGATTACGACCTATGTACGCACTGCACATAACTCCGCATCACGAACGTGCGTTTCTGGCTTTCTGATCCGAATATTCGAGTTACGAGGAGTGCACACATCTGAATGCACTTGACGAGACGTGGAACCGGCAAAAAACCGAAAACCGACTAGTTAGAGTTAAACGCACGTTCTGTCCAGCCTCTCCCCCAGAGAGCATGAGTGAAGGCTGTTAATGATTACGGCCTGATTCTGACGGCTTATATTGCAGCTTTTTTTTGCAATTATTATGATCCTGTCTCAGAGGTATATGTGTCCACGAAGAATCCCACGTACACACAAGCGGTCTCTGAAAGGTACCCTGACTCATTCCTTGGCTCGTTACATGAGAGAGTCGGGTTCGGCATCCTTCAGTTTATAAGAACGGTTAACATATTACGCACAGCCCTATCCCTTGGCCTGTAAGTCGGGGCTTCCCCCTCCCATAGGACATACATGGGGACTGCGTCTTACACGTCGGGCCATCTCTGCTTCTGCAAGGGAGGGTGAGGAACGGGGTTAATTTCCTCGTGGCGGAACATCGATAGACAGGACCGAAAGCATGGGGTGCACACGGATGAGACCGCGACCCTCTTCTCCATGCTCAGTCTGTCCGCGTGTACCTCGGGCGATCCGAAAGGCGAAATCTTGTGCATTGAGTGACCTAGAGCTCTTAGTTCAGTCATGCACGTTATAATGCATGGAATGAACTCCGTGGTACTAATGAACTTTTACACCTTGATCCGCTTTTACATACTTTACCCTCCTACCGAGTATTCGGCGAAGGCAATTTCGGATAGCAAGAAAGCCATCCTTTCCTTCGCTAAATTGCCGCGCAGTCAGGCTTAAGCCAAAAGTGAGACACGAGGGTGACGCCAGGATAATACCAAACTCTGGGATCTCGGCTTTCCCTACATGCTACCCCTCCCGTGACTGATGCTA"

# Output
result_graph = de_bruijn_graph(k_value, input_text)

# Print the result in the specified format
for node, neighbors in result_graph.items():
    print(f"{node}: {' '.join(neighbors)}")
